; ModuleID = 'miniC'
source_filename = "miniC"

@0 = private unnamed_addr constant [21 x i8] c"if: value of a = %d\0A\00", align 1
@1 = private unnamed_addr constant [23 x i8] c"else: value of a = %d\0A\00", align 1
@2 = private unnamed_addr constant [22 x i8] c"for: value of a = %d\0A\00", align 1
@3 = private unnamed_addr constant [17 x i8] c"value of a = %d\0A\00", align 1

define i32 @something() {
entry:
  ret i32 1
}

define i8 @main(i32 %arg1) {
entry:
  %y = alloca i32, i32 0, align 4
  %a = alloca i64, i32 0, align 8
  %w = alloca i64, i32 0, align 8
  %i = alloca i64, i32 0, align 8
  %arg11 = alloca i32, i32 0, align 4
  store i32 %arg1, i32* %arg11, align 4
  store i64 0, i64* %i, align 4
  store i64 0, i64* %w, align 4
  store i64 0, i64* %a, align 4
  %0 = load i64, i64* %w, align 4
  store i64 1, i64* %w, align 4
  store i32 0, i32* %y, align 4
  %1 = call i32 @something()
  %2 = load i64, i64* %a, align 4
  %3 = load i64, i64* %w, align 4
  %addition = add i64 %3, 3
  store i64 %addition, i64* %a, align 4
  %4 = load i64, i64* %i, align 4
  store i64 0, i64* %i, align 4
  %5 = load i64, i64* %i, align 4
  %lessthan = icmp slt i64 %5, 5
  br i1 %lessthan, label %loop, label %afterLoop

loop:                                             ; preds = %then, %entry
  %6 = load i64, i64* %a, align 4
  %greaterthan = icmp sgt i64 %6, 5
  br i1 %greaterthan, label %if, label %else

afterLoop:                                        ; preds = %then, %if, %entry
  %7 = load i64, i64* %i, align 4
  store i64 0, i64* %i, align 4
  %8 = load i64, i64* %i, align 4
  %lessthan5 = icmp slt i64 %8, 5
  br i1 %lessthan5, label %loop3, label %afterLoop4

if:                                               ; preds = %loop
  %9 = load i64, i64* %a, align 4
  store i64 6, i64* %a, align 4
  %10 = load i64, i64* %a, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @0, i32 0, i32 0), i64 %10)
  ret i64 %10
  br label %afterLoop

else:                                             ; preds = %loop
  %12 = load i64, i64* %a, align 4
  store i64 14, i64* %a, align 4
  %13 = load i64, i64* %a, align 4
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @1, i32 0, i32 0), i64 %13)
  br label %then

then:                                             ; preds = %else
  %15 = load i64, i64* %a, align 4
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @2, i32 0, i32 0), i64 %15)
  %17 = load i64, i64* %i, align 4
  %addEqual = add i64 %17, 1
  store i64 %addEqual, i64* %i, align 4
  %18 = load i64, i64* %i, align 4
  %lessthan2 = icmp slt i64 %18, 5
  br i1 %lessthan2, label %loop, label %afterLoop

loop3:                                            ; preds = %loop3, %afterLoop
  %19 = load i64, i64* %i, align 4
  %addEqual6 = add i64 %19, 1
  store i64 %addEqual6, i64* %i, align 4
  %20 = load i64, i64* %i, align 4
  %lessthan7 = icmp slt i64 %20, 5
  br i1 %lessthan7, label %loop3, label %afterLoop4

afterLoop4:                                       ; preds = %loop3, %afterLoop
  %21 = load i64, i64* %i, align 4
  store i64 0, i64* %i, align 4
  %22 = load i64, i64* %i, align 4
  %lessthan10 = icmp slt i64 %22, 5
  br i1 %lessthan10, label %loop8, label %afterLoop9

loop8:                                            ; preds = %loop8, %afterLoop4
  %23 = load i64, i64* %i, align 4
  %addEqual11 = add i64 %23, 1
  store i64 %addEqual11, i64* %i, align 4
  %24 = load i64, i64* %i, align 4
  %lessthan12 = icmp slt i64 %24, 5
  br i1 %lessthan12, label %loop8, label %afterLoop9

afterLoop9:                                       ; preds = %loop8, %afterLoop4
  %25 = load i64, i64* %w, align 4
  %26 = load i64, i64* %a, align 4
  store i64 %26, i64* %w, align 4
  %27 = load i64, i64* %a, align 4
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @3, i32 0, i32 0), i64 %27)
  ret i8 120
}

declare i32 @printf(i8*, ...)
